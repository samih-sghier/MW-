package drawer6.figure;
// Name:

import java.awt.*;
import java.util.ArrayList;

/**
 * This abstract class is the superclass of all figures drawn in the drawing
 * canvas. It implements all the methods for dealing with selection,
 * intersection, movement, and highlighting. It has an abstract drawShape
 * method.
 * 
 * @author Dale Skrien
 * @version 1.0 August 2005
 */
public abstract class Figure implements Cloneable {
	private Rectangle boundingRect;
	private boolean isSelected;
	private boolean isDeleted;

	public Figure(int x, int y, int w, int h) {
		this.boundingRect = new Rectangle(x, y, w, h);
		isSelected = false;
		isDeleted=false;
	}

	public void move(int dx, int dy) {
		boundingRect.x += dx;
		boundingRect.y += dy;
	}

	public void moveTo(int x, int y) {
		boundingRect.x = x;
		boundingRect.y = y;
	}

	public void setSize(int width, int height) {
		boundingRect.width = width;
		boundingRect.height = height;
	}

	/**
	 * @return the smallest Rectangle bounding this figure
	 */
	public Rectangle getBoundingRect() {
		return new Rectangle(boundingRect);
	}

	public boolean contains(int px, int py) {
		return boundingRect.contains(px, py);
	}

	public Object clone() {
		try {
			Figure clone = (Figure) super.clone();
			clone.boundingRect = (Rectangle) boundingRect.clone();
			return clone;
		} catch (CloneNotSupportedException e) {
			assert false; // this block should never execute
			return null;
		}
	}

	public boolean intersects(Rectangle selectionRect) {
		return boundingRect.intersects(selectionRect);
	}

	public void setSelected(boolean b) {
		isSelected = b;
	}
	public void setDeleted(boolean b) {
		isDeleted = b;
	}

	public boolean isSelected() {
		return isSelected;
	}
    public boolean isDeleted(){
    	return isDeleted;
    }
	/**
	 * draws this figure, including highlighting
	 * 
	 * @param g
	 *            the Graphics object that does the drawing
	 */
	public void draw(Graphics g) {
		if( isDeleted==false){
			drawShape(g);
		}
		if (isSelected)
			highlightBoundingRect(g);
		
			
	}

	private void highlightBoundingRect(Graphics g) {
		Color oldColor = g.getColor();
		g.setColor(Color.green);
		int x = boundingRect.x;
		int y = boundingRect.y;
		int w = boundingRect.width;
		int h = boundingRect.height;
		g.drawRect(x - 3, y - 3, 6, 6);
		g.drawRect(x + w - 3, y - 3, 6, 6);
		g.drawRect(x - 3, y + h - 3, 6, 6);
		g.drawRect(x + w - 3, y + h - 3, 6, 6);
		g.setColor(oldColor);
	}

	/**
	 * draws the underlying shape ignoring highlighting
	 * 
	 * @param g
	 *            the Graphics object that does the drawing
	 */
	public abstract void drawShape(Graphics g);
    //public abstract void stopDrawingSelectedShapes(Graphics g);
	// default behavior is that the list contains only this Figure.
	public ArrayList<Figure> getComposedFigures() {
		ArrayList<Figure> list = new ArrayList<Figure>();
		list.add(this);
		return list;
	}
}
